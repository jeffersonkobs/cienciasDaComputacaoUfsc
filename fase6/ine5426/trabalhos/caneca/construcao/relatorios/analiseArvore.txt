tree grammar CanecaArvore options {ASTLabelType=CommonTree; backtrack=false; language=Java; k=1; output=AST; tokenVocab=CanecaSintatico; } ;
programa : ( unicadeDeCompilacao )+ -> ^( PROGRAMA_ ( unicadeDeCompilacao )+ ) ;
unicadeDeCompilacao : cabecalho ( classe -> ^( UNIDADE_ cabecalho classe ) | interfaces -> ^( UNIDADE_ cabecalho interfaces ) ) ;
cabecalho : pacote importacoes -> ^( CABECALHO_ pacote importacoes ) ;
pacote : PACOTE IDENTIFICADOR_DE_PACOTE TERMINADOR -> ^( PACOTE_ IDENTIFICADOR_DE_PACOTE ) ;
importacoes : ( importacao )* -> ^( IMPORTACOES_ ( importacao )* ) ;
importacao : IMPORTE ( IDENTIFICADOR IDENTIFICADOR_DE_PACOTE ( COMO IDENTIFICADOR )? -> ^( IMPORTACAO_ IDENTIFICADOR IDENTIFICADOR_DE_PACOTE ( IDENTIFICADOR )? ) | IDENTIFICADOR_DE_PACOTE -> ^( IMPORTACAO_ IDENTIFICADOR_DE_PACOTE ) ) TERMINADOR ;
classe : CLASSE modificadorDeAcessoFeminino IDENTIFICADOR listaDeTiposGenericos listaDeInterfaces corpoDaClasse -> ^( CLASSE_ modificadorDeAcessoFeminino IDENTIFICADOR listaDeTiposGenericos listaDeInterfaces corpoDaClasse ) ;
interfaces : INTERFACE modificadorDeAcessoFeminino IDENTIFICADOR listaDeTiposGenericos listaDeInterfaces corpoDaInterface -> ^( INTERFACE_ modificadorDeAcessoFeminino IDENTIFICADOR listaDeTiposGenericos listaDeInterfaces corpoDaInterface ) ;
corpoDaClasse : INICIO atributos construtores destrutor metodos FIM -> ^( CORPO_ atributos construtores destrutor metodos ) ;
corpoDaInterface : INICIO atributos assinaturasDeMetodos FIM -> ^( CORPO_ atributos assinaturasDeMetodos ) ;
atributos : ( atributo )* -> ^( ATRIBUTOS_ ( atributo )* ) ;
construtores : ( construtor )+ -> ^( CONSTRUTORES_ ( construtor )+ ) ;
metodos : ( metodo )* -> ^( METODOS_ ( metodo )* ) ;
assinaturasDeMetodos : ( assinaturaDeMetodo TERMINADOR )* -> ^( ASSINATURAS_DE_METODOS_ ( assinaturaDeMetodo )* ) ;
atributo : ATRIBUTO modificadorDeAcessoMasculino ( ESTATICO )? tipo IDENTIFICADOR ( -> ^( ATRIBUTO_ modificadorDeAcessoMasculino ( ESTATICO )? tipo IDENTIFICADOR ) | ATRIBUIDOR expressaoOuLogico -> ^( ATRIBUTO_ modificadorDeAcessoMasculino ( ESTATICO )? tipo IDENTIFICADOR ) ^( ATRIBUIDOR ^( PRIMARIA_ ^( COMANDO_ ^( REFERENCIA_ IDENTIFICADOR ) ) ) expressaoOuLogico ) ) TERMINADOR ;
construtor : assinaturaDeConstrutor blocoDeInstrucoes -> ^( CONSTRUTOR_ assinaturaDeConstrutor blocoDeInstrucoes ) ;
destrutor : assinaturaDeDestrutor blocoDeInstrucoes -> ^( DESTRUTOR_ assinaturaDeDestrutor blocoDeInstrucoes ) ;
metodo : assinaturaDeMetodo blocoDeInstrucoes -> ^( METODO_ assinaturaDeMetodo blocoDeInstrucoes ) ;
assinaturaDeConstrutor : CONSTRUTOR modificadorDeAcessoMasculino IDENTIFICADOR listaDeArgumentos -> ^( ASSINATURA_ modificadorDeAcessoMasculino IDENTIFICADOR listaDeArgumentos ) ;
assinaturaDeDestrutor : DESTRUTOR modificadorDeAcessoMasculino IDENTIFICADOR listaDeArgumentosVazia -> ^( ASSINATURA_ modificadorDeAcessoMasculino IDENTIFICADOR listaDeArgumentosVazia ) ;
assinaturaDeMetodo : METODO modificadorDeAcessoMasculino ( ESTATICO )? tipo IDENTIFICADOR listaDeArgumentos -> ^( ASSINATURA_ modificadorDeAcessoMasculino ( ESTATICO )? tipo IDENTIFICADOR listaDeArgumentos ) ;
modificadorDeAcessoMasculino : ( PUBLICO | PRIVADO | PROTEGIDO );
modificadorDeAcessoFeminino : ( PUBLICA | PRIVADA | PROTEGIDA );
listaDeParametros : PARENTESE_ESQUERDO ( expressao ( SEPARADOR expressao )* )? PARENTESE_DIREITO -> ^( PARAMETROS_ ( expressao )* ) ;
listaDeArgumentosVazia : PARENTESE_ESQUERDO PARENTESE_DIREITO -> ^( ARGUMENTOS_ ) ;
listaDeArgumentos : PARENTESE_ESQUERDO ( declaracao ( SEPARADOR declaracao )* )? PARENTESE_DIREITO -> ^( ARGUMENTOS_ ( declaracao )* ) ;
listaDeInterfaces : ( IMPLEMENTA tipo ( SEPARADOR tipo )* )? -> ^( INTERFACES_ ( tipo )* ) ;
listaDeTiposGenericos : ( COLCHETE_ESQUERDO tipoGenerico COLCHETE_DIREITO )* -> ^( TIPOS_GENERICOS_ ( tipoGenerico )* ) ;
listaDeTipos : ( COLCHETE_ESQUERDO tipo ( SEPARADOR tipo )* COLCHETE_DIREITO )? -> ^( TIPOS_ ( tipo )* ) ;
listaDeCapturas : ( capture )+ -> ^( CAPTURAS_ ( capture )+ ) ;
tipoGenerico : IDENTIFICADOR listaDeInterfaces -> ^( TIPO_GENERICO_ IDENTIFICADOR listaDeInterfaces ) ;
tipo : IDENTIFICADOR listaDeTipos -> ^( TIPO_ IDENTIFICADOR listaDeTipos ) ;
declaracao : tipo IDENTIFICADOR -> ^( DECLARACAO_ tipo IDENTIFICADOR ) ;
declaracaoComAtribuicaoOpcional : tipo IDENTIFICADOR ( -> ^( DECLARACAO_ tipo IDENTIFICADOR ) | ATRIBUIDOR expressaoOuLogico -> ^( DECLARACAO_ tipo IDENTIFICADOR ) ^( ATRIBUIDOR ^( PRIMARIA_ ^( COMANDO_ ^( REFERENCIA_ IDENTIFICADOR ) ) ) expressaoOuLogico ) ) ;
expressao : expressaoOuLogico ( ATRIBUIDOR ^ expressaoOuLogico )? ;
expressaoOuLogico : expressaoELogico ( OU ^ expressaoELogico )* ;
expressaoELogico : expressaoComparacaoLogica ( E ^ expressaoComparacaoLogica )* ;
expressaoComparacaoLogica : expressaoAditiva ( ( IGUAL | DIFERENTE | MAIOR | MAIOR_IGUAL | MENOR | MENOR_IGUAL ) ^ expressaoAditiva )? ;
expressaoAditiva : expressaoMultiplicativa ( ( SOMA | SUBTRACAO ) ^ expressaoMultiplicativa )* ;
expressaoMultiplicativa : expressaoUnaria ( ( MULTIPLICACAO | DIVISAO | RESTO_DA_DIVISAO ) ^ expressaoUnaria )* ;
expressaoUnaria : ( expressaoPrimaria | SUBTRACAO expressaoPrimaria -> ^( NEGATIVACAO_ expressaoPrimaria ) | NEGACAO expressaoPrimaria -> ^( NEGACAO expressaoPrimaria ) );
expressaoPrimaria : ( PARENTESE_ESQUERDO expressao PARENTESE_DIREITO -> expressao | VALOR_BOOLEANO | VALOR_NULO | CONSTANTE_INTEIRA | CONSTANTE_REAL | LITERAL_CARACTERE | LITERAL_TEXTO | comando );
comando : referencia ( chamada )* -> ^( COMANDO_ referencia ( chamada )* ) ;
referencia : ( ESSE -> ^( REFERENCIA_ ESSE ) | ESSA -> ^( REFERENCIA_ ESSA ) | instanciacao -> ^( REFERENCIA_ instanciacao ) | IDENTIFICADOR ( listaDeParametros )? -> ^( REFERENCIA_ IDENTIFICADOR ( listaDeParametros )? ) );
chamada : ( CHAMADA_DE_CLASSE | CHAMADA_DE_OBJETO ) ^ IDENTIFICADOR ( listaDeParametros )? ;
instanciacao : ( NOVO | NOVA ) tipo listaDeParametros -> ^( INSTANCIACAO_ tipo listaDeParametros ) ;
destruicao : DESTRUA expressao -> ^( DESTRUICAO_ expressao ) ;
retorno : RETORNE expressao -> ^( RETORNO_ expressao ) ;
se : SE PARENTESE_ESQUERDO expressao PARENTESE_DIREITO blocoDeInstrucoes ( SENAO blocoDeInstrucoes )? -> ^( SE_ expressao blocoDeInstrucoes ( blocoDeInstrucoes )? ) ;
para : PARA PARENTESE_ESQUERDO expressao TERMINADOR expressao TERMINADOR expressao PARENTESE_DIREITO blocoDeInstrucoes -> ^( PARA_ expressao expressao expressao blocoDeInstrucoes ) ;
repita : REPITA PARENTESE_ESQUERDO declaracao TERMINADOR expressao PARENTESE_DIREITO blocoDeInstrucoes -> ^( REPITA_ declaracao expressao blocoDeInstrucoes ) ;
enquanto : ENQUANTO PARENTESE_ESQUERDO expressao PARENTESE_DIREITO blocoDeInstrucoes -> ^( ENQUANTO_ expressao blocoDeInstrucoes ) ;
tente : TENTE blocoDeInstrucoes listaDeCapturas -> ^( TENTE_ blocoDeInstrucoes listaDeCapturas ) ;
capture : CAPTURE PARENTESE_ESQUERDO declaracao PARENTESE_DIREITO blocoDeInstrucoes -> ^( CAPTURE_ declaracao blocoDeInstrucoes ) ;
lance : LANCE expressao -> ^( LANCE_ expressao ) ;
instrucao : ( ( options {k=2; } : expressao TERMINADOR !| declaracaoComAtribuicaoOpcional TERMINADOR !) | IMPRIMIR TERMINADOR !| DEPURAR TERMINADOR !| destruicao TERMINADOR !| retorno TERMINADOR !| se | para | repita | enquanto | tente | lance TERMINADOR !);
blocoDeInstrucoes : INICIO ( instrucao )* FIM -> ^( INSTRUCOES_ ( instrucao )* ) ;
CanecaArvore.programa:94:23 decision 1: k=1
CanecaArvore.unicadeDeCompilacao:99:2 decision 2: k=1
CanecaArvore.importacoes:113:14 decision 3: k=1
CanecaArvore.importacao:118:42 decision 4: k=1
CanecaArvore.importacao:118:2 decision 5: k=1
CanecaArvore.atributos:140:12 decision 6: k=1
CanecaArvore.construtores:144:14 decision 7: k=1
CanecaArvore.metodos:148:10 decision 8: k=1
CanecaArvore.assinaturasDeMetodos:152:33 decision 9: k=1
CanecaArvore.atributo:156:41 decision 10: k=1
CanecaArvore.atributo:157:2 decision 11: k=1
CanecaArvore.assinaturaDeMetodo:183:39 decision 12: k=1
CanecaArvore.listaDeParametros:199:53 decision 13: k=1
CanecaArvore.listaDeParametros:199:22 decision 14: k=1
CanecaArvore.listaDeArgumentos:207:55 decision 15: k=1
CanecaArvore.listaDeArgumentos:207:22 decision 16: k=1
CanecaArvore.listaDeInterfaces:211:35 decision 17: k=1
CanecaArvore.listaDeInterfaces:211:3 decision 18: k=1
CanecaArvore.listaDeTiposGenericos:215:51 decision 19: k=1
CanecaArvore.listaDeTipos:219:42 decision 20: k=1
CanecaArvore.listaDeTipos:219:3 decision 21: k=1
CanecaArvore.listaDeCapturas:223:11 decision 22: k=1
CanecaArvore.declaracaoComAtribuicaoOpcional:240:2 decision 23: k=1
CanecaArvore.expressao:246:21 decision 24: k=1
CanecaArvore.expressaoOuLogico:250:41 decision 25: k=1
CanecaArvore.expressaoELogico:254:58 decision 26: k=1
CanecaArvore.expressaoComparacaoLogica:258:20 decision 27: k=1
CanecaArvore.expressaoAditiva:262:71 decision 28: k=1
CanecaArvore.expressaoMultiplicativa:266:81 decision 29: k=1
CanecaArvore.expressaoUnaria:270:1 decision 30: k=1
CanecaArvore.expressaoPrimaria:276:1 decision 31: k=1
CanecaArvore.comando:287:22 decision 32: k=1
CanecaArvore.referencia:294:17 decision 33: k=1
CanecaArvore.referencia:291:1 decision 34: k=1
CanecaArvore.chamada:298:58 decision 35: k=1
CanecaArvore.instanciacao:302:3 decision 36: k=1
CanecaArvore.se:314:71 decision 37: k=1
CanecaArvore.instrucao:343:1 decision 38: k=2
CanecaArvore.instrucao:342:1 decision 39: k=1
CanecaArvore.blocoDeInstrucoes:360:20 decision 40: k=1
