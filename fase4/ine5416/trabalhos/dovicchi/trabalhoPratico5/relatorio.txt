Roteiro 1

	f 0 = 1
	f 1 = 5
	f 2 = 2
	f x = 1
	ou
	f x | x == 0 = 1
		| x == 1 = 5
		| x == 2 = 2
		| otherwise = 1

	quicksort :: (Ord a) => [a] -> [a]
	quicksort x = case x of 
		[] -> []
		(x:xs) -> quicksort [y | y <- xs, y < x] ++ [x] ++ quicksort [y | y <- xs, y >= x]	


Roteiro 2

1.	[1..1000]
2.	[1, 4..99]
3.	take 50 [1, 3..]
4.	fatorial :: (Num t) => t -> t
	fatorial 0 = 1
	fatorial n = n * fatorial (n - 1)
	euler :: (Fractional t, Enum t) => t -> t
	euler n = sum [1 / fatorial x | x <- [0..n]]
